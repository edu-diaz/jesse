# -- replicaCount will set the replicaset count more information can be found [here](https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/).
replicaCount: 1

image:
  # -- image.repository sets the container image more information can be found [here](https://kubernetes.io/docs/concepts/containers/images/).
  repository: salehmir/jesse
  # -- image.pullPolicy sets the pull policy for images.
  pullPolicy: IfNotPresent
  # -- image.tag overrides the image tag whose default is the chart appVersion.
  tag: ""

# -- imagePullSecrets is for the secretes for pulling an image from a private repository more information can be found [here](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/).
imagePullSecrets: []
# -- nameOverride is to override the chart name.
nameOverride: ""
# -- fullnameOverride is to fully override the chart name.
fullnameOverride: ""

serviceAccount:
  # -- serviceAccount.create specifies whether a service account should be created, more information can be found [here](https://kubernetes.io/docs/concepts/security/service-accounts/).
  create: true
  # -- serviceAccount.automount automatically mounts ServiceAccount's API credentials.
  automount: true
  # -- serviceAccount.annotations to add to the service account.
  annotations: {}
  # -- serviceAccount.name is the name of the service account to use. If not set and create is true, a name is generated using the fullname template.
  name: ""

# -- podAnnotations is for setting Kubernetes Annotations to a Pod, more information can be found [here](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
podAnnotations: {}
# -- podLabels is for setting Kubernetes Labels to a Pod, more information can be found [here](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
podLabels: {}

# -- podSecurityContext defines privilege and access control settings for a pod, more information can be found [here](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod).
podSecurityContext: {}
  # fsGroup: 2000

# -- securityContext defines privilege and access control settings for a container, more information can be found [here](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container).
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- service.type sets the service type, more information can be found [here](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).
  type: ClusterIP
  # -- service.port sets the port, more information can be found [here](https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports).
  port: 9000
  # -- service.annotations is for setting Kubernetes Annotations to a Service, more information can be found [here](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
  annotations: {}

ingress:
  # -- ingress.enabled is for setting up the ingress, more information can be found [here](https://kubernetes.io/docs/concepts/services-networking/ingress/).
  enabled: false
  # -- ingress.className sets the ingress class, more information can be found [here](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class).
  className: ""
  # -- ingress.annotations is for setting Kubernetes Annotations to the Ingress, more information can be found [here](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- ingress.hosts is a list of ingress hosts.
  hosts: []
  #  - host: chart-example.local
  #    paths:
  #      - path: /
  #        pathType: ImplementationSpecific
  # -- ingress.tls is the secret holding the TLS key and secret, more information can be found [here](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls).
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- resources sets the amount of resources the container needs, more information can be found [here](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  # -- autoscaling.enabled is for enabling horizontal autoscaling, more information can be found [here](https://kubernetes.io/docs/concepts/workloads/autoscaling/)
  enabled: false
  # -- autoscaling.minReplicas sets the minimum number of replicas.
  minReplicas: 1
  # -- autoscaling.maxReplicas sets the maximum number of replicas.
  maxReplicas: 10
  # -- autoscaling.targetCPUUtilizationPercentage sets CPU threshold that triggers the autoscaling.
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- volumes is a list of additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# -- volumeMounts is a list of additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# -- nodeSelector constrains a pod to be scheduled on a particular node, more information can be found [here](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/).
nodeSelector: {}

# -- tolerations allow the scheduler to schedule pods with matching taints, more information can be found [here](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
tolerations: []

# -- affinity expands nodeSelectors, more information can be found [here](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity).
affinity: {}

postgresql:
  # @ignored
  fullnameOverride: postgresql
  auth:
    # -- postgresql.username is the database username used by Jesse.
    username: jesse_user
    # -- postgresql.password is the database password used by Jesse.
    password: pg-password
    # -- postgresql.database is the database used by Jesse.
    database: jesse_db

redis:
  # @ignored
  fullnameOverride: redis
  # @ignored
  architecture: standalone
  auth:
  # -- redis.auth.password is the redis password used by Jesse.
    password: redis-password

# -- config contains all the configuration variables for Jesse, more information can be found [here](https://docs.jesse.trade/docs/configuration#environment-variables).
config: |-
  PASSWORD=test
  APP_PORT=9000

  POSTGRES_HOST=postgresql
  POSTGRES_NAME=jesse_db
  POSTGRES_PORT=5432
  POSTGRES_USERNAME=jesse_user
  POSTGRES_PASSWORD=pg-password

  REDIS_HOST=redis-master
  REDIS_PORT=6379
  REDIS_PASSWORD=redis-password

  LICENSE_API_TOKEN=<MY_TOKEN>